// Code generated by mockery v2.32.0. DO NOT EDIT.

package user_mocks

import (
	user "github.com/rubemlrm/go-api-bootstrap/user"
	mock "github.com/stretchr/testify/mock"
)

// MockUseCase is an autogenerated mock type for the UseCase type
type MockUseCase struct {
	mock.Mock
}

type MockUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUseCase) EXPECT() *MockUseCase_Expecter {
	return &MockUseCase_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: _a0
func (_m *MockUseCase) Create(_a0 *user.User) (user.ID, error) {
	ret := _m.Called(_a0)

	var r0 user.ID
	var r1 error
	if rf, ok := ret.Get(0).(func(*user.User) (user.ID, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*user.User) user.ID); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(user.ID)
	}

	if rf, ok := ret.Get(1).(func(*user.User) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUseCase_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUseCase_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 *user.User
func (_e *MockUseCase_Expecter) Create(_a0 interface{}) *MockUseCase_Create_Call {
	return &MockUseCase_Create_Call{Call: _e.mock.On("Create", _a0)}
}

func (_c *MockUseCase_Create_Call) Run(run func(_a0 *user.User)) *MockUseCase_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*user.User))
	})
	return _c
}

func (_c *MockUseCase_Create_Call) Return(_a0 user.ID, _a1 error) *MockUseCase_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUseCase_Create_Call) RunAndReturn(run func(*user.User) (user.ID, error)) *MockUseCase_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: id
func (_m *MockUseCase) Get(id user.ID) (*user.User, error) {
	ret := _m.Called(id)

	var r0 *user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(user.ID) (*user.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(user.ID) *user.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(user.ID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUseCase_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockUseCase_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - id user.ID
func (_e *MockUseCase_Expecter) Get(id interface{}) *MockUseCase_Get_Call {
	return &MockUseCase_Get_Call{Call: _e.mock.On("Get", id)}
}

func (_c *MockUseCase_Get_Call) Run(run func(id user.ID)) *MockUseCase_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(user.ID))
	})
	return _c
}

func (_c *MockUseCase_Get_Call) Return(_a0 *user.User, _a1 error) *MockUseCase_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUseCase_Get_Call) RunAndReturn(run func(user.ID) (*user.User, error)) *MockUseCase_Get_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUseCase creates a new instance of MockUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUseCase {
	mock := &MockUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
