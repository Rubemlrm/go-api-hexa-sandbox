// Code generated by mockery v2.32.0. DO NOT EDIT.

package user_mocks

import (
	user "github.com/rubemlrm/go-api-bootstrap/user"
	mock "github.com/stretchr/testify/mock"
)

// MockWriter is an autogenerated mock type for the Writer type
type MockWriter struct {
	mock.Mock
}

type MockWriter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWriter) EXPECT() *MockWriter_Expecter {
	return &MockWriter_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: u
func (_m *MockWriter) Create(u *user.User) (user.ID, error) {
	ret := _m.Called(u)

	var r0 user.ID
	var r1 error
	if rf, ok := ret.Get(0).(func(*user.User) (user.ID, error)); ok {
		return rf(u)
	}
	if rf, ok := ret.Get(0).(func(*user.User) user.ID); ok {
		r0 = rf(u)
	} else {
		r0 = ret.Get(0).(user.ID)
	}

	if rf, ok := ret.Get(1).(func(*user.User) error); ok {
		r1 = rf(u)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWriter_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockWriter_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - u *user.User
func (_e *MockWriter_Expecter) Create(u interface{}) *MockWriter_Create_Call {
	return &MockWriter_Create_Call{Call: _e.mock.On("Create", u)}
}

func (_c *MockWriter_Create_Call) Run(run func(u *user.User)) *MockWriter_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*user.User))
	})
	return _c
}

func (_c *MockWriter_Create_Call) Return(_a0 user.ID, _a1 error) *MockWriter_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWriter_Create_Call) RunAndReturn(run func(*user.User) (user.ID, error)) *MockWriter_Create_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWriter creates a new instance of MockWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWriter {
	mock := &MockWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
