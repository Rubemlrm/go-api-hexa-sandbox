// Code generated by mockery v2.31.0. DO NOT EDIT.

package validations_mocks

import (
	mock "github.com/stretchr/testify/mock"

	validator "github.com/go-playground/validator/v10"
)

// MockValidater is an autogenerated mock type for the Validater type
type MockValidater struct {
	mock.Mock
}

type MockValidater_Expecter struct {
	mock *mock.Mock
}

func (_m *MockValidater) EXPECT() *MockValidater_Expecter {
	return &MockValidater_Expecter{mock: &_m.Mock}
}

// Check provides a mock function with given fields: val
func (_m *MockValidater) Check(val interface{}) bool {
	ret := _m.Called(val)

	var r0 bool
	if rf, ok := ret.Get(0).(func(interface{}) bool); ok {
		r0 = rf(val)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockValidater_Check_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Check'
type MockValidater_Check_Call struct {
	*mock.Call
}

// Check is a helper method to define mock.On call
//   - val interface{}
func (_e *MockValidater_Expecter) Check(val interface{}) *MockValidater_Check_Call {
	return &MockValidater_Check_Call{Call: _e.mock.On("Check", val)}
}

func (_c *MockValidater_Check_Call) Run(run func(val interface{})) *MockValidater_Check_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockValidater_Check_Call) Return(_a0 bool) *MockValidater_Check_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockValidater_Check_Call) RunAndReturn(run func(interface{}) bool) *MockValidater_Check_Call {
	_c.Call.Return(run)
	return _c
}

// CheckWithTranslations provides a mock function with given fields: val
func (_m *MockValidater) CheckWithTranslations(val interface{}) error {
	ret := _m.Called(val)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(val)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockValidater_CheckWithTranslations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckWithTranslations'
type MockValidater_CheckWithTranslations_Call struct {
	*mock.Call
}

// CheckWithTranslations is a helper method to define mock.On call
//   - val interface{}
func (_e *MockValidater_Expecter) CheckWithTranslations(val interface{}) *MockValidater_CheckWithTranslations_Call {
	return &MockValidater_CheckWithTranslations_Call{Call: _e.mock.On("CheckWithTranslations", val)}
}

func (_c *MockValidater_CheckWithTranslations_Call) Run(run func(val interface{})) *MockValidater_CheckWithTranslations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockValidater_CheckWithTranslations_Call) Return(_a0 error) *MockValidater_CheckWithTranslations_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockValidater_CheckWithTranslations_Call) RunAndReturn(run func(interface{}) error) *MockValidater_CheckWithTranslations_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterCustomTranslation provides a mock function with given fields: tag, message
func (_m *MockValidater) RegisterCustomTranslation(tag string, message string) error {
	ret := _m.Called(tag, message)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(tag, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockValidater_RegisterCustomTranslation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterCustomTranslation'
type MockValidater_RegisterCustomTranslation_Call struct {
	*mock.Call
}

// RegisterCustomTranslation is a helper method to define mock.On call
//   - tag string
//   - message string
func (_e *MockValidater_Expecter) RegisterCustomTranslation(tag interface{}, message interface{}) *MockValidater_RegisterCustomTranslation_Call {
	return &MockValidater_RegisterCustomTranslation_Call{Call: _e.mock.On("RegisterCustomTranslation", tag, message)}
}

func (_c *MockValidater_RegisterCustomTranslation_Call) Run(run func(tag string, message string)) *MockValidater_RegisterCustomTranslation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockValidater_RegisterCustomTranslation_Call) Return(_a0 error) *MockValidater_RegisterCustomTranslation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockValidater_RegisterCustomTranslation_Call) RunAndReturn(run func(string, string) error) *MockValidater_RegisterCustomTranslation_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterCustomValidationRule provides a mock function with given fields: tag, fn
func (_m *MockValidater) RegisterCustomValidationRule(tag string, fn validator.Func) error {
	ret := _m.Called(tag, fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, validator.Func) error); ok {
		r0 = rf(tag, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockValidater_RegisterCustomValidationRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterCustomValidationRule'
type MockValidater_RegisterCustomValidationRule_Call struct {
	*mock.Call
}

// RegisterCustomValidationRule is a helper method to define mock.On call
//   - tag string
//   - fn validator.Func
func (_e *MockValidater_Expecter) RegisterCustomValidationRule(tag interface{}, fn interface{}) *MockValidater_RegisterCustomValidationRule_Call {
	return &MockValidater_RegisterCustomValidationRule_Call{Call: _e.mock.On("RegisterCustomValidationRule", tag, fn)}
}

func (_c *MockValidater_RegisterCustomValidationRule_Call) Run(run func(tag string, fn validator.Func)) *MockValidater_RegisterCustomValidationRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(validator.Func))
	})
	return _c
}

func (_c *MockValidater_RegisterCustomValidationRule_Call) Return(_a0 error) *MockValidater_RegisterCustomValidationRule_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockValidater_RegisterCustomValidationRule_Call) RunAndReturn(run func(string, validator.Func) error) *MockValidater_RegisterCustomValidationRule_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockValidater creates a new instance of MockValidater. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockValidater(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockValidater {
	mock := &MockValidater{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
